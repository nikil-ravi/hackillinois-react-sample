'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _OrsUtil = require('./OrsUtil');

var _OrsUtil2 = _interopRequireDefault(_OrsUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var orsUtil = new _OrsUtil2.default();

var OrsElevation = function () {
  function OrsElevation(args) {
    _classCallCheck(this, OrsElevation);

    this.args = {};
    if ('api_key' in args) {
      this.args.api_key = args.api_key;
    } else {
      // eslint-disable-next-line no-console
      console.error('Please add your openrouteservice api_key...');
    }
  }

  _createClass(OrsElevation, [{
    key: 'clear',
    value: function clear() {
      for (var variable in this.args) {
        if (variable !== 'api_key') delete this.args[variable];
      }
    }
  }, {
    key: 'generatePayload',
    value: function generatePayload(args) {
      var payload = {};

      for (var key in args) {
        if (key === 'host' || key === 'api_version' || key === 'mime_type' || key === 'api_key') {
          continue;
        } else {
          payload[key] = args[key];
        }
      }
      return payload;
    }
  }, {
    key: 'elevationPromise',
    value: function elevationPromise() {
      var that = this;

      return new _bluebird2.default(function (resolve, reject) {
        var timeout = 5000;

        if (!that.args.host) {
          that.args.host = 'https://api.openrouteservice.org';
        }

        var url = orsUtil.prepareUrl(that.args);

        var payload = that.generatePayload(that.args);

        _superagent2.default.post(url).send(payload).accept(that.args.mime_type).set('Authorization', that.args.api_key).timeout(timeout).end(function (err, res) {
          //console.log(res.body, res.headers, res.status)
          if (err || !res.ok) {
            // eslint-disable-next-line no-console
            console.error(err);
            reject(new Error(err));
          } else if (res) {
            resolve(res.body);
          }
        });
      });
    }
  }, {
    key: 'lineElevation',
    value: function lineElevation(reqArgs) {
      if (!reqArgs.service) {
        reqArgs.service = 'elevation/line';
      }
      orsUtil.copyProperties(reqArgs, this.args);
      return this.elevationPromise();
    }
  }, {
    key: 'pointElevation',
    value: function pointElevation(reqArgs) {
      if (!reqArgs.service) {
        reqArgs.service = 'elevation/point';
      }
      orsUtil.copyProperties(reqArgs, this.args);
      return this.elevationPromise();
    }
  }]);

  return OrsElevation;
}();

exports.default = OrsElevation;