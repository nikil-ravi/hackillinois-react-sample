'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OrsUtil = function () {
  function OrsUtil() {
    _classCallCheck(this, OrsUtil);
  }

  _createClass(OrsUtil, [{
    key: 'clone',
    value: function clone(obj) {
      var newObj = {};
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          newObj[prop] = obj[prop];
        }
      }
      return newObj;
    }
  }, {
    key: 'copyProperties',
    value: function copyProperties(args, argsInto) {
      if (!args) return argsInto;

      for (var prop in args) {
        if (args.hasOwnProperty(prop) && args[prop] !== undefined) {
          argsInto[prop] = args[prop];
        }
      }
      return argsInto;
    }
  }, {
    key: 'extractError',
    value: function extractError(res, url) {
      var msg = void 0;

      if (res && res.body) {
        msg = res.body;
        if (msg.message) msg = msg.message;
      } else {
        msg = res;
      }

      return new Error(msg + ' - for url ' + url);
    }
  }, {
    key: 'isArray',
    value: function isArray(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue.toLowerCase() === '[object array]';
    }
  }, {
    key: 'isObject',
    value: function isObject(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue.toLowerCase() === '[object object]';
    }
  }, {
    key: 'isString',
    value: function isString(value) {
      return typeof value === 'string';
    }
  }, {
    key: 'prepareMeta',
    value: function prepareMeta(args) {
      return {
        host: args.host,
        apiVersion: args.api_version,
        profile: args.profile,
        format: args.format,
        service: args.service,
        apiKey: args.api_key,
        mimeType: args.mime_type
      };
    }
  }, {
    key: 'prepareRequest',
    value: function prepareRequest(args) {
      delete args.mime_type;
      delete args.host;
      delete args.api_version;
      delete args.profile;
      delete args.format;
      delete args.service;
      delete args.api_key;
      return _extends({}, args);
    }
  }, {
    key: 'prepareUrl',
    value: function prepareUrl(args) {
      var url = args.host || '';

      // make path
      var urlPathParts = [args.apiVersion, args.service, args.profile, args.format];

      var urlPath = '/';
      var counter = 0;
      for (var key in urlPathParts) {
        if (urlPathParts[key]) {
          if (counter > 0 && counter) {
            urlPath += '/';
          }
          urlPath += urlPathParts[key];
        }
        counter++;
      }

      // Remove double slashs from path
      var cleanUrlPath = urlPath.replace(/\/\//g, '/');
      url += cleanUrlPath;

      // The end of the url can not be a slash
      if (url.slice(-1) === '/') {
        url = url.slice(0, -1);
      }
      return url;
    }
  }]);

  return OrsUtil;
}();

exports.default = OrsUtil;